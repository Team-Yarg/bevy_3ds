; Hopefully, a PICA200 vertex shader (less and less basic by the day)

; Model matrix uniform - loaded by the renderer before rendering a given model
.fvec modelMtx[4]

; Camera matrix uniform - loaded by the renderer before any given render
.fvec camMtx[4]

; Projection matrix uniform - loaded by the renderer before any given render
.fvec projMtx[4]

; Useful constants
; Define a vec4 with various useful values as the elements, then set aliases to get them out
.constf useful_constants(0.0, 1.0, -1.0, -0.5)
; All zeroes - copy out the first element in all 4 places
.alias zeroes useful_constants.xxxx
; All ones - copy out the second element in all 4 places
.alias ones useful_constants.yyyy
; All negative ones
.alias neg_ones useful_constants.zzzz
; All negative halves
.alias neg_halves useful_constants.wwww

; Output registers, written to by the shader
.out outpos pos
.out outtex texcoord0

; Inputs (passed in through v0..=v15, with aliases for convenience)
.alias inpos v0
.alias intex v1

; The actual shader function
.proc main
    ; r0.xyz = xyz components of inpos
    mov r0.xyz, inpos

    ; r0.w = 1.0 from ones constant alias
    mov r0.w, ones

    ; r1 = modelMatrix * r0
    ; perform matrix * vector multiplication via dot product instruction one component at a time
    dp4 r1.x, modelMtx[0], r0
    dp4 r1.y, modelMtx[1], r0
    dp4 r1.z, modelMtx[2], r0
    dp4 r1.w, modelMtx[3], r0

    ; r2 = cameraMatrix * r1
    dp4 r2.x, camMtx[0], r1
    dp4 r2.y, camMtx[1], r1
    dp4 r2.z, camMtx[2], r1
    dp4 r2.w, camMtx[3], r1

    ; outpos = projectionMatrix * r2
    dp4 outpos.x, projMtx[0], r2
    dp4 outpos.y, projMtx[1], r2
    dp4 outpos.z, projMtx[2], r2
    dp4 outpos.w, projMtx[3], r2

    ; outtex = intex
    mov outtex, intex

    ; Done!
    end
.end ; main
